#!/usr/bin/env python
# Version: v.22.05.30
# -*- coding: utf-8 -*-
import os
import sys
from dotenv import load_dotenv
from multiprocessing import cpu_count
from subprocess import check_call, check_output

import yaml
from waftlib import (
    ADDONS_YAML,
    AUTO_REPOS_YAML,
    CORE,
    LOG_LEVELS,
    ODOO_DIR,
    PRIVATE,
    REPOS_YAML,
    SRC_DIR,
    logger,
)

SCRIPT_PATH = os.path.abspath(os.path.dirname(__file__))
os.environ['ODOO_WORK_DIR'] = os.path.realpath(os.path.join(SCRIPT_PATH, "../.."))
load_dotenv(os.path.join(os.environ["ODOO_WORK_DIR"], ".env-default"))
load_dotenv(os.path.join(os.environ["ODOO_WORK_DIR"], ".env-shared"), override=True)
load_dotenv(os.path.join(os.environ["ODOO_WORK_DIR"], ".env-secret"), override=True)

UMASK = os.environ.get("UMASK")
UID = int(os.environ.get("UID") or -1)
GID = int(os.environ.get("GID") or -1)
log_level = os.environ.get("WAFT_LOG_LEVEL", "INFO")


def aggregate(config):
    """Execute git aggregator to pull git code.

    :param str config:
        Path where to find the ``repos.yaml`` file.
    """
    logger.info("Running gitaggregate with %s", config)
    old_umask = None
    try:
        # Download git code with the specified umask, if any
        if UMASK:
            old_umask = os.umask(int(UMASK))
        cmd = [
            "gitaggregate",
            "-h",
        ]
        has_no_color_switch = b"no-color" in check_output(cmd)
        cmd = ["gitaggregate"]
        if has_no_color_switch:
            cmd.append("--no-color")
        cmd += [
            "--expand-env",
            "--config",
            config,
            "--log-level",
            log_level,
            "--jobs",
            str(cpu_count() or 1),
            "aggregate",
        ]
        logger.info("Running '%s' in '%s'", ' '.join(cmd), SRC_DIR)
        check_call(
            cmd,
            cwd=SRC_DIR,
            stderr=sys.stderr,
            stdout=sys.stdout,
        )
    finally:
        # Restore umask, if changed
        if old_umask is not None:
            os.umask(old_umask)
        # Chown recursively, if UID or GID are specified
        if ~UID or ~GID:
            for root, dirs, files in os.walk(SRC_DIR):
                for target in dirs + files:
                    try:
                        target_path = os.path.join(root, target)
                        if not os.path.islink(target_path):
                            # if target_path is a link we would only chown the
                            # target, as the target should be chowned separately
                            # we can skip all symlinks and prevent showing
                            # unclear errors
                            os.chown(target_path, UID, GID)
                    except Exception:
                        logger.debug(
                            "Error trying to chown on file. Skipping...", exc_info=True
                        )

def missing_repos_config():
    """Find the undefined repositories and return their default configuration.

    :return dict:
        git-aggregator-ready configuration dict for undefined repositories.
    """
    defined, expected = set(), {ODOO_DIR}
    # Find the repositories defined by hand
    try:
        with open(REPOS_YAML) as yaml_file:
            for doc in yaml.safe_load_all(yaml_file):
                for repo in doc:
                    defined.add(os.path.abspath(os.path.join(SRC_DIR, repo)))
    except (IOError, AttributeError):
        logger.debug("No repositories defined by hand")
    addons_env = {}
    # Find the repositories that should be present
    try:
        with open(ADDONS_YAML) as yaml_file:
            for doc in yaml.safe_load_all(yaml_file):
                env = dict(os.environ, **doc.get("ENV", {}))
                for repo in doc:
                    if repo in {PRIVATE, "ONLY", "ENV"}:
                        continue
                    if repo == CORE:
                        repo_path = ODOO_DIR
                    else:
                        repo_path = os.path.abspath(os.path.join(SRC_DIR, repo))
                    if not os.path.exists(repo_path):
                        expected.add(repo_path)
                    else:
                        if os.path.isdir(repo_path):
                            if len(os.listdir(repo_path)) == 0:
                                expected.add(repo_path)
                        else:
                            expected.add(repo_path)
    except (IOError, AttributeError):
        logger.debug("No addons are expected to be present")
    # Find the undefined repositories and generate a config for them
    missing = expected - defined
    if missing:
        for repo_path in missing:
            if not os.path.exists(repo_path):
                print("\n\nERROR: " + repo_path + " addons directory does not exist!")
            else:
                if os.path.isdir(repo_path):
                    if len(os.listdir(repo_path)) == 0:
                        print("\n\nERROR: " + repo_path + " addons directory is empty!")
                else:
                    print("\n\nERROR: " + repo_path + " addons not a directory!")
        sys.exit("\n\n\n compare addons.yaml with repos.yaml and correct them.\n\n\n")

# Aggregate user-specified repos
if os.path.isfile(REPOS_YAML):
    aggregate(REPOS_YAML)

# Aggregate unspecified repos
missing_config = missing_repos_config()
