#!/usr/bin/env python
# Version: v.23.08.03
# -*- coding: utf-8 -*-

import argparse
from string import Template
try:
    from venvwaftlib import *
except IOError:
    print("( ERROR ) : Run 'waft-update-depths' python script in '.venv-waft' virtual environment.")
    exit(1)

def split_line(line):
    split_lines = line.split(" ")
    for sl in split_lines:
        if sl == "":
            split_lines.pop(split_lines.index(sl))
    return split_lines


def is_in_history(value, history):
    for commit in history:
        if commit[:8] == value[:8]:
            return True
    return False


def decode_variables(decode_string_variables):
    """
    pass a string and return variables replaced in it.
    @returns string
    """
    # may be int, str
    decode_string_variables = str(decode_string_variables)
    yaml_substituted = Template(decode_string_variables)
    return yaml_substituted.substitute(os.environ)


def preprocess_merge(addons_repositories_paths, addons_repository_path, addons_repository_merge):
    remotes = addons_repositories_paths[addons_repository_path]["remotes"].keys()
    addons_repository_split_merge = [x for x in addons_repository_merge.split(" ") if x != ""]
    if addons_repository_split_merge[0] not in remotes:
        logger.debug("Invalid Remote on line: %s" % addons_repository_merge)
        raise ValueError
    repo_path = os.path.abspath(os.path.join(CODE_ODOO_DIRECTORY, addons_repository_path))
    return repo_path, addons_repository_split_merge

def get_branch_name(addons_repository_split_merge, merge_type):
    if merge_type in (1, 3):
        return decode_variables(addons_repository_split_merge[1])
    return False

def get_merge_type(addons_repository_split_merge, addons_repository_path):
    """
    Possible syntaxes for merges:

    <remote> <branch>     merge_type=1
    <remote> <PIN>        merge_type=2
    <remote> <branch> <PIN>     merge_type=3
    merge_type=0  "invalid"
    """
    all_commits = {}
    if len(addons_repository_split_merge) == 3:
        return 3
    else:
        if is_in_history(addons_repository_split_merge[1], all_commits.get(addons_repository_path, [])):
            return 2
        else:
            return 1
    return 0  # unreachable.


def process_depth(addons_repository_split_merge, branchname, main_branch, main_branch_name, repo_path):
    os.chdir(repo_path)
    # make sure we have the latest branch available.
    run(
        [
            "git",
            "fetch",
            addons_repository_split_merge[0],
            branchname,
        ],
        stdout=PIPE,
        stderr=PIPE,
    )
    # look at most recent common commit.
    lastrev = (
        run(
            [
                "git",
                "merge-base",
                "".join([main_branch[0], "/", main_branch_name]),
                "".join([addons_repository_split_merge[0], "/", branchname]),
            ],
            stdout=PIPE,
            stderr=PIPE,
        )
        .stdout.decode("utf-8")
        .replace("\n", "")
    )
    if not lastrev:
        return 1024  # Can happen when remote not yet added.
    # we now calculate the needed depth of this branch
    mindepth = (
        run(
            [
                "git",
                "rev-list",
                "".join([main_branch[0], "/", main_branch_name]),
                "^" + lastrev,
                "--count",
            ],
            stdout=PIPE,
            stderr=PIPE,
        )
        .stdout.decode("utf-8")
        .replace("\n", "")
    )
    try:
        return int(mindepth)
    except Exception:
        # Should log/print some error here.
        return 1024


def main():
    """
    parsing directly repos.yaml, if something is not in addons.yaml, branch will still
    be in folder, but may not be included in addons. Nothing changes.
    """
    repo_min_depth = {}
    changes = ''
    with open(REPOS_YAML) as yaml_file:
        for addons_repositories_paths in yaml.safe_load_all(yaml_file):
            for addons_repository_path in addons_repositories_paths:
                print("===>processing repo %s" % addons_repository_path)
                repo_min_depth[addons_repository_path] = 0
                if addons_repository_path in {PRIVATE, "ONLY", "ENV"}:
                    continue
                target = addons_repositories_paths[addons_repository_path].get("target") or False
                # main branch is defined as target or in absence of target, merge[0]
                main_branch = split_line(target or addons_repositories_paths[addons_repository_path]["merges"][0])
                merge_type = get_merge_type(main_branch, addons_repository_path)
                main_branch_name = get_branch_name(main_branch, merge_type)
                for merge in addons_repositories_paths[addons_repository_path]["merges"]:
                    repo_path, addons_repository_split_merge = preprocess_merge(addons_repositories_paths, addons_repository_path, merge)
                    # this script cannot work on new ./builds it is written to keep
                    # depths of instances that have been built at least once with
                    # if one source folder is missing we skip it.
                    if not os.path.exists(repo_path):
                        continue
                    merge_type = get_merge_type(addons_repository_split_merge, addons_repository_path)
                    branchname = get_branch_name(saddons_repository_plitted_merge, merge_type)
                    if branchname:
                        # compute depth only for merges with branchname
                        min_depth = process_depth(
                            addons_repository_split_merge,
                            branchname,
                            main_branch,
                            main_branch_name,
                            repo_path,
                        )
                        repo_min_depth[addons_repository_path] = (
                            min_depth > repo_min_depth[addons_repository_path]
                            and min_depth
                            or repo_min_depth[addons_repository_path]
                        )
                        if repo_min_depth[addons_repository_path] > 0:
                            waft_depth = decode_variables(
                                addons_repositories_paths[addons_repository_path]["defaults"].get("depth")
                            )
                            # just in case the substitution didn't happen because variables
                            # are not explicitly loaded in env...
                            if waft_depth == "${WAFT_DEPTH_MERGE}":
                                # waft_depth_merge, if not specified in env defaults to 100
                                waft_depth = os.environ.get("WAFT_DEPTH_MERGE") or 100
                            if waft_depth == "${WAFT_DEPTH_DEFAULT}":
                                waft_depth = os.environ.get("WAFT_DEPTH_DEFAULT") or 1
                            waft_depth = int(waft_depth)
                            if repo_min_depth[addons_repository_path] > waft_depth:
                                changes += ("\n\t Increasing depth of %s from %s to %s"
                                    % (
                                        addons_repository_path,
                                        addons_repositories_paths[addons_repository_path]["defaults"]["depth"],
                                        str(repo_min_depth[addons_repository_path]),
                                    )
                                )
                                addons_repositories_paths[addons_repository_path]["defaults"]["depth"] = repo_min_depth[addons_repository_path]

    if changes:
        print("========Applying Depth changes to repos.yaml:")
        print(changes)
        print("=======================================")
        yaml_file = open(REPOS_YAML, "w")
        yaml_file.write(yaml.dump(addons_repositories_paths, default_flow_style=True, default_style='|', sort_keys=False))
        yaml_file.close()

if os.path.isfile(REPOS_YAML) and __name__ == "__main__":
    main()
else:
    logger.debug("no %s  repository file found" % REPOS_YAML)
    raise ValueError
