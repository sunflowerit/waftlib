#!/usr/bin/env python
# Version: v.23.08.03
# -*- coding: utf-8 -*-

import shutil
import sys
try:
    from venvwaftlib import *
except IOError:
    logger.error("Run 'odoo-code-clean' python script in '.venv-waft' virtual environment.")
    exit(1)

# Get the enabled paths
addons_full_paths = {}
for addon_name, addons_repository_path in addons_config():
    addons_repository_full_path = os.path.realpath(os.path.join(CODE_ODOO_DIRECTORY, addons_repository_path))
    addons_full_paths.setdefault(addons_repository_full_path, set())
    addons_full_paths[addons_repository_full_path].add(addon_name)
logger.debug("Addon paths enabled: %s", addons_full_paths)

# Traverse src dir and remove anything not explicitly enabled
for directory, subdirectories, subfiles in os.walk(CODE_ODOO_DIRECTORY):
    if False == True:
        print(subfiles)
    logger.debug("Checking for cleanup directory %s", directory)
    # Skip main src directory
    if directory == CODE_ODOO_DIRECTORY:
        continue
    # Always skip enterprise/*
    if directory.endswith == "odoo-code/enterprise":
        subdirectories[:] = []
        continue
    # Always skip private/*
    if directory.endswith == "odoo-code/private":
        subdirectories[:] = []
        continue
    # Inside the odoo dir, skip all but addons dir
    if directory == ODOO_MAIN_CODE_PATH and WAFT_CLEAN == 'false':
        subdirectories[:] = ["addons"]
        continue
    # Leave .git directories unless we are really CLEAN-ing
    if directory.endswith("/.git") and WAFT_CLEAN == 'false':
        subdirectories[:] = []
        continue
    # Leave .github directories unless we are really CLEAN-ing
    if directory.endswith("/.github") and WAFT_CLEAN == 'false':
        subdirectories[:] = []
        continue
    # Leave '__xxxxxxx__' folders unless we are really CLEAN-ing
    if directory.endswith("__") and WAFT_CLEAN == 'false':
        subdirectories[:] = []
        continue
    # Leave 'setup' directories unless we are really CLEAN-ing
    if directory.endswith("/setup") and WAFT_CLEAN == 'false':
        subdirectories[:] = []
        continue
    try:
        # Get addons enabled in current directory
        enabled_addons = addons_full_paths[directory]
    except KeyError:
        # This isn't an addon; is there anything inside to preserve?
        directory += os.path.sep
        if any(addons_full_path.startswith(directory) for addons_full_path in addons_full_paths):
            # Then, let's walk in; we'll remove later if needed
            continue
        else:
            if WAFT_CLEAN == 'false':
                continue
    else:
        # This is an addons repo; do not walk into the enabled ones
        for enabled_addon in enabled_addons:
            subdirectories.remove(enabled_addon)
        continue
    # Remove every other directory
    logger.info("Removing directory %s", directory)
    shutil.rmtree(directory)
