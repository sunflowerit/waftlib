#!/usr/bin/env python
# Version: v.23.08.03
# -*- coding: utf-8 -*-

try:
    from venvwaftlib import *
except IOError:
    print("( ERROR ) : Run 'build' python script in '.venv-waft' virtual environment.")
    exit(1)
import sys
import shutil
from multiprocessing import cpu_count
from contextlib import closing
from string import Template
from io import StringIO
from configparser import RawConfigParser
parser = RawConfigParser(strict=False)

for addons_repository_full_path in waft_auto_yaml_dictionary:
    if addons_repository_full_path in {addons_enterprise_full_path, addons_private_full_path}:
        continue
    if os.path.exists(addons_repository_full_path):
        if not os.path.isdir(os.path.join(addons_repository_full_path, '.git')):
            shutil.rmtree(addons_repository_full_path)
            logger.warning(
                "'%s' does not exist in '%s', waft removed existed '%s'!",
                os.path.isdir(os.path.join(addons_repository_full_path, '.git')), addons_repository_full_path, addons_repository_full_path
                )
            continue
        if not os.path.isdir(os.path.join(addons_repository_full_path, '.git/refs')):
            shutil.rmtree(addons_repository_full_path)
            logger.warning(
                "'%s' does not exist in '%s', waft removed existed '%s'!",
                os.path.isdir(os.path.join(addons_repository_full_path, '.git/refs')), addons_repository_full_path, addons_repository_full_path
                )
            continue
        if not os.path.isdir(os.path.join(addons_repository_full_path, '.git/objects')):
            shutil.rmtree(addons_repository_full_path)
            logger.warning(
                "'%s' does not exist in '%s', waft removed existed '%s'!",
                os.path.isdir(os.path.join(addons_repository_full_path, '.git/objects')), addons_repository_full_path, addons_repository_full_path
                )
            continue
        try:
            check_call(
                [ "git", "-C", addons_repository_full_path, "reset", "--hard", "HEAD", ],
                cwd=CODE_ODOO_DIRECTORY,
                stderr=sys.stderr,
                stdout=sys.stdout,
            )
        except GitError:
            shutil.rmtree(addons_repository_full_path)
            logger.warning(
                "'git -C %s reset --hard HEAD' failed, waft removed existed '%s'!",
                addons_repository_full_path, addons_repository_full_path
                )
        try:
            check_call(
                [ "git", "-C", addons_repository_full_path, "clean", "-fd", ],
                cwd=CODE_ODOO_DIRECTORY,
                stderr=sys.stderr,
                stdout=sys.stdout,
            )
        except GitError:
            shutil.rmtree(addons_repository_full_path)
            logger.warning(
                "'git -C %s clean -fd' failed, waft removed existed '%s'!",
                addons_repository_full_path, addons_repository_full_path
                )

CODE_ODOO_YAML_DUMP_FILE = os.path.join(ODOO_AUTO_DIRECTORY, 'odoo-code.yaml')
gitaggregate_addons_failures = []
for addons_repository_full_path in waft_auto_yaml_dictionary:
    if addons_repository_full_path in {addons_enterprise_full_path, addons_private_full_path}:
        continue
    addons_repository_dump_dictionary = dict()
    addons_repository_dump_dictionary['remotes'] = addons_repository_full_path['remotes']
    addons_repository_dump_dictionary['merges'] = addons_repository_full_path['merges']
    addons_repository_dump_dictionary['target'] = addons_repository_full_path['target']
    waft_auto_yaml_dump_dictionary = dict()
    waft_auto_yaml_dump_dictionary[addons_repository_full_path] = addons_repository_dump_dictionary
    if os.path.exists(CODE_ODOO_YAML_DUMP_FILE):
        shutil.rmtree(CODE_ODOO_YAML_DUMP_FILE)
    code_odoo_yaml_dump_file = open(CODE_ODOO_YAML_DUMP_FILE, "w")
    code_odoo_yaml_dump_file.write(yaml.safe_dump(waft_auto_yaml_dump_dictionary, explicit_start='---',
        default_flow_style=False, sort_keys=False))
    code_odoo_yaml_dump_file.close()
    try:
        logger.info(
            "Running gitaggregate with '%s' for '%s'",
            CODE_ODOO_YAML_DUMP_FILE, addons_repository_full_path
            )
        gitaggregate_cmd = ["gitaggregate", "--expand-env", "--config", CODE_ODOO_YAML_DUMP_FILE, "--log-level",
            WAFT_LOG_LEVEL, "--jobs", str(cpu_count() or 1), "aggregate"]
        logger.info("Running '%s' in '%s'", ' '.join(gitaggregate_cmd), CODE_ODOO_DIRECTORY)
        check_call(
            gitaggregate_cmd,
            cwd=CODE_ODOO_DIRECTORY,
            stderr=sys.stderr,
            stdout=sys.stdout,
        )
    except Exception:
        gitaggregate_addons_failures.append(addons_repository_full_path)
addons_repository_dump_dictionary = dict()
waft_auto_yaml_dump_dictionary = dict()









# Get the enabled paths
addons_full_paths = {}
for addon_name, addons_repository_path in addons_config():
    addons_repository_full_path = os.path.realpath(os.path.join(CODE_ODOO_DIRECTORY, addons_repository_path))
    addons_full_paths.setdefault(addons_repository_full_path, set())
    addons_full_paths[addons_repository_full_path].add(addon_name)
logger.debug("Addon paths enabled: %s", addons_full_paths)

addons_repository_path = ''
# Traverse src dir and remove anything not explicitly enabled
for directory, subdirectories, subfiles in os.walk(CODE_ODOO_DIRECTORY):
    if False == True:
        print(subfiles)
    logger.debug("Checking for cleanup directory %s", directory)
    # Skip main src directory
    if directory == CODE_ODOO_DIRECTORY:
        continue
    # Always skip enterprise/*
    if directory.endswith == "odoo-code/enterprise":
        subdirectories[:] = []
        continue
    # Always skip private/*
    if directory.endswith == "odoo-code/private":
        subdirectories[:] = []
        continue
    # Inside the odoo dir, skip all but addons dir
    if directory == ODOO_MAIN_CODE_PATH and WAFT_CLEAN == 'false':
        subdirectories[:] = ["addons"]
        continue
    # Leave .git directories unless we are really CLEAN-ing
    if directory.endswith("/.git") and WAFT_CLEAN == 'false':
        subdirectories[:] = []
        continue
    # Leave .github directories unless we are really CLEAN-ing
    if directory.endswith("/.github") and WAFT_CLEAN == 'false':
        subdirectories[:] = []
        continue
    # Leave '__xxxxxxx__' folders unless we are really CLEAN-ing
    if directory.endswith("__") and WAFT_CLEAN == 'false':
        subdirectories[:] = []
        continue
    # Leave 'setup' directories unless we are really CLEAN-ing
    if directory.endswith("/setup") and WAFT_CLEAN == 'false':
        subdirectories[:] = []
        continue
    try:
        # Get addons enabled in current directory
        enabled_addons = addons_full_paths[directory]
    except KeyError:
        # This isn't an addon; is there anything inside to preserve?
        directory += os.path.sep
        if any(addons_full_path.startswith(directory) for addons_full_path in addons_full_paths):
            # Then, let's walk in; we'll remove later if needed
            continue
        else:
            if WAFT_CLEAN == 'false':
                continue
    else:
        # This is an addons repo; do not walk into the enabled ones
        for enabled_addon in enabled_addons:
            subdirectories.remove(enabled_addon)
        continue
    # Remove every other directory
    logger.info("Removing directory %s", directory)
    shutil.rmtree(directory)

addons_links = glob(os.path.join(ODOO_ADDONS_AUTO_DIRECTORY, "*"))
for addon_link in addons_links:
    os.remove(addon_link)
addons_full_paths_list = []
for addons_repository_full_path in waft_auto_yaml_dictionary:
    addons_full_paths_tmp_list = []
    if waft_auto_yaml_dictionary[addons_repository_full_path][addons] == [os.path.join(addons_repository_full_path, '*')]:
        if addons_repository_full_path == ODOO_MAIN_CODE_PATH:
            for addon_partial_full_path in glob(os.path.join(ODOO_MAIN_CODE_PATH, 'addons/*')):
                addons_full_paths_tmp_list.append(addon_partial_full_path)
            if ODOO_VERSION not in {'8.0', '9.0'}:
                for addon_partial_full_path in glob(os.path.join(ODOO_MAIN_CODE_PATH, 'openerp/addons/*')):
                    addons_full_paths_tmp_list.append(addon_partial_full_path)
            else:
                for addon_partial_full_path in glob(os.path.join(ODOO_MAIN_CODE_PATH, 'odoo/addons/*')):
                    addons_full_paths_tmp_list.append(addon_partial_full_path)
        else:
            for addon_partial_full_path in glob(os.path.join(addons_repository_full_path, '*')):
                addons_full_paths_tmp_list.append(addon_partial_full_path)
    else:
        for addon_full_tmp_path in waft_auto_yaml_dictionary[addons_repository_full_path][addons]:
            for addon_partial_full_path in glob(addon_full_tmp_path):
                addons_full_paths_tmp_list.append(addon_partial_full_path)
    if waft_auto_yaml_dictionary[addons_repository_full_path][addons_except] == '':
        addons_full_paths_list = addons_full_paths_tmp_list
    else:
        for addon_full_tmp_path in addons_full_paths_tmp_list:
            if addon_full_tmp_path not in waft_auto_yaml_dictionary[addons_repository_full_path][addons_except]:
                addons_full_paths_list.append(addon_full_tmp_path)
    for addon_full_path in addons_full_paths_list:
        auto_directory_addon_relpath = os.path.relpath(addon_full_path, ODOO_ADDONS_AUTO_DIRECTORY)
        addon_link = os.path.join(ODOO_ADDONS_AUTO_DIRECTORY, os.path.join(os.path.relpath(addon_full_path, addons_repository_full_path)))
        os.symlink(auto_directory_addon_relpath, addon_link)
        logger.debug("Linked %s in %s", addon_full_path, addon_link)

for addon_full_path in addon_found_path:
    if not os.path.isdir(addon_full_path):
        continue
    manifests = (os.path.join(addon_full_path, manifest_file_name) for manifest_file_name in
                 ("__manifest__.py", "__openerp__.py"))
    if not any(os.path.isfile(manifest_file_name) for manifest_file_name in manifests):
        addons_missing_manifest_paths.add(addon_full_path)
        logger.debug(
            "Skipping '%s' as it is not a valid Odoo module.",
            addon_full_path
        )
        continue
    logger.debug(
        "Registering addon %s",
        addon_full_path
    )
    addon_name = os.path.basename(addon_full_path)
    addons_info.setdefault(addon_name, set())
    addons_info[addon_name].add(addons_repository_path)

AUTO_ODOO_CONF_FILE = os.path.join(ODOO_WORK_DIRECTORY, ".ignore/auto/odoo.conf")

# Read the configurations files.
logger.info("Import %s configuration file.", os.path.join(ODOO_WORK_DIRECTORY, "config/odoo-default.conf"))
parser.read(os.path.join(ODOO_WORK_DIRECTORY, "config/odoo-default.conf"))
logger.info("Import %s configuration file.", os.path.join(ODOO_WORK_DIRECTORY, "config/odoo-code-override-default.conf"))
parser.read(os.path.join(ODOO_WORK_DIRECTORY, "config/odoo-code-override-default.conf"))

# Write it to a memory string object
with closing(StringIO()) as generating_odoo_conf_file:
    parser.write(generating_odoo_conf_file)
    generating_odoo_conf_file.seek(0)
    # Obtain the config string
    generated_odoo_conf_file = generating_odoo_conf_file.read()
    # Expand environment variables found within
    generated_odoo_conf_file = Template(generated_odoo_conf_file).substitute(os.environ)
    logger.debug("Resulting configuration:\n%s", AUTO_ODOO_CONF_FILE)
    # Write it to destination
    with open(AUTO_ODOO_CONF_FILE, "w") as auto_odoo_conf_file:
        auto_odoo_conf_file.write(generated_odoo_conf_file)

if WAFT_CLEAN == 'true':
    if os.listdir(CODE_ODOO_DIRECTORY):
        for scrap in os.listdir(CODE_ODOO_DIRECTORY):
            if scrap in {'enterprise', 'private'}:
                continue
            scrap_path = os.path.join(CODE_ODOO_DIRECTORY, scrap)
            if os.path.isfile(scrap_path):
                try:
                    os.remove(scrap_path)
                except IOError:
                    logger.error("Can't remove '%s' file.", scrap_path)
                    exit(1)
            elif os.path.isdir(scrap_path):
                try:
                    shutil.rmtree(scrap_path)
                except IOError:
                    logger.error("Can't remove '%s' directory.", scrap_path)
                    exit(1)
    else:
        logger.info("The %s directory is already empty.", CODE_ODOO_DIRECTORY)
