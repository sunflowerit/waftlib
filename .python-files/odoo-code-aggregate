#!/usr/bin/env python
# Version: v.23.08.03
# -*- coding: utf-8 -*-

from multiprocessing import cpu_count
import sys
try:
    from venvwaftlib import *
except IOError:
    logger.error("Run 'odoo-code-aggregate' python script in '.venv-waft' virtual environment.")
    exit(1)

def aggregate(config):
    """Execute git aggregator to pull git code.

    :param str config:
        Path where to find the ``odoo-code.yaml`` file.
    """
    logger.info("Running gitaggregate with %s", config)
    cmd = ["gitaggregate", "--expand-env", "--config", config, "--log-level", WAFT_LOG_LEVEL, "--jobs", str(cpu_count() or 1), "aggregate"]
    logger.info("Running '%s' in '%s'", ' '.join(cmd), CODE_ODOO_DIRECTORY)
    check_call(
        cmd,
        cwd=CODE_ODOO_DIRECTORY,
        stderr=sys.stderr,
        stdout=sys.stdout,
    )

def missing_code_odoo_repositories_config():
    """Find the undefined repositories and return their default configuration.

    :return dict:
        git-aggregator-ready configuration dict for undefined repositories.
    """
    defined, expected = set(), {ODOO_MAIN_CODE_PATH}
    # Find the repositories defined by hand
    try:
        with open(CODE_ODOO_YAML_FILE) as code_odoo_yaml_file:
            for addons_repository_path in yaml.safe_load(code_odoo_yaml_file):
                defined.add(os.path.abspath(os.path.join(CODE_ODOO_DIRECTORY, addons_repository_path)))
    except (IOError, AttributeError):
        logger.debug("No repositories defined by hand")
    # Find the repositories that should be present
    try:
        with open(CODE_ODOO_YAML_FILE) as code_odoo_yaml_file:
            for addons_repository_path in yaml.safe_load(code_odoo_yaml_file):
                if addons_repository_path == "enterprise":
                    continue
                if addons_repository_path == "private":
                    continue
                if addons_repository_path == "odoo/addons":
                    repo_path = ODOO_MAIN_CODE_PATH
                else:
                    repo_path = os.path.abspath(os.path.join(CODE_ODOO_DIRECTORY, addons_repository_path))
                if not os.path.exists(repo_path):
                    expected.add(repo_path)
                else:
                    if os.path.isdir(repo_path):
                        if len(os.listdir(repo_path)) == 0:
                            expected.add(repo_path)
                    else:
                        expected.add(repo_path)
    except (IOError, AttributeError):
        logger.debug("No addons are expected to be present")
    # Find the undefined repositories and generate a config for them
    missing = expected - defined
    if missing:
        for repo_path in missing:
            if not os.path.exists(repo_path):
                print("\n\n( ERROR ) : " + repo_path + " addons directory does not exist!")
            else:
                if os.path.isdir(repo_path):
                    if len(os.listdir(repo_path)) == 0:
                        print("\n\n( ERROR ) : " + repo_path + " addons directory is empty!")
                else:
                    print("\n\n( ERROR ) : " + repo_path + " addons not a directory!")
        sys.exit("\n\n\n compare addons.yaml with odoo-code.yaml and correct them.\n\n\n")

# Aggregate user-specified odoo-code repositories.
if os.path.isfile(CODE_ODOO_YAML_FILE):
    aggregate(CODE_ODOO_YAML_FILE)

# Aggregate unspecified odoo-code repositories.
missing_config = missing_code_odoo_repositories_config()
